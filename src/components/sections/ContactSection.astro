---
import AuthBtn from "@components/ui/buttons/AuthBtn.astro";
import ContactIconBlock from "@components/ui/blocks/ContactIconBlock.astro";
import TextInput from "@components/ui/forms/input/TextInput.astro";
import EmailContactInput from "@components/ui/forms/input/EmailContactInput.astro";
import PhoneInput from "@components/ui/forms/input/PhoneInput.astro";
import TextAreaInput from "@components/ui/forms/input/TextAreaInput.astro";
import Icon from "@components/ui/icons/Icon.astro";

// Define the variables that will be used in this component
const title: string = "Contact us";
const subTitle: string =
  "Have questions or want to discuss a project? Reach out, and let's craft the perfect solution with our team and services.";
const formTitle: string = "Fill in the form below";
const formSubTitle: string = "We'll try the best to get back to you!";
---

<!-- Contact Us -->
<section class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14">
  <div class="mx-auto max-w-2xl lg:max-w-5xl">
    <div class="text-center">
      <h1
        class="text-balance text-2xl font-bold tracking-tight text-neutral-800 md:text-4xl md:leading-tight dark:text-neutral-200"
      >
        <span class="text-yellow-500 dark:text-yellow-400">Contact Us</span>
      </h1>
      <p class="mt-1 text-pretty text-neutral-600 dark:text-neutral-400">
        {subTitle}
      </p>
    </div>

    <div class="mt-12 grid items-center gap-6 lg:grid-cols-2 lg:gap-16">
      <div class="flex flex-col rounded-xl p-4 sm:p-6 lg:p-8">
        <h2
          class="mb-8 text-xl font-bold text-neutral-700 dark:text-neutral-300"
        >
          {formTitle}
        </h2>
        <!-- Form for user input with various input fields.-->
        <form id="contact-form" novalidate>
          <input
            type="hidden"
            name="access_key"
            value="8eb230cc-1878-4db4-a136-5b3c356ca211"
          />
          <input
            type="checkbox"
            name="botcheck"
            class="hidden"
            style="display:none"
          />

          <div class="grid gap-4">
            <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
              <TextInput id="first-name" label="First Name" name="first_name" />
              <TextInput id="last-name" label="Last Name" name="last_name" />
            </div>

            <EmailContactInput id="email" name="email" />
            <PhoneInput id="phone" name="phone" />
            <TextAreaInput id="message" label="Details" name="message" />
          </div>

          <div class="mt-4 grid">
            <AuthBtn title="Send Message" type="submit" id="submit-btn" />
          </div>

          <div class="mt-3 text-center">
            <p
              id="form-status"
              class="text-sm text-neutral-600 dark:text-neutral-400"
            >
              {formSubTitle}
            </p>
          </div>
        </form>
      </div>

      <!-- ContactIconBlocks are used to display different methods of contacting, including visiting office, email, browsing knowledgebase, and FAQ. -->
      <div class="divide-y divide-neutral-300 dark:divide-neutral-700">
        <ContactIconBlock
          heading="Knowledgebase"
          content="Browse through all of our knowledgebase articles."
          isLinkVisible={true}
          linkTitle="Visit our lounge"
          linkURL="https://sentence-member-shoftime.vercel.app/"
          isArrowVisible={true}
        >
          <Icon name="question" />
        </ContactIconBlock>

        <ContactIconBlock
          heading="FAQ"
          content="Explore our FAQ for quick, clear answers to common queries."
          isLinkVisible={true}
          linkTitle="Visit FAQ"
          linkURL="/#faq-section"
          isArrowVisible={true}
        >
          <Icon name="chatBubble" />
        </ContactIconBlock>

        <ContactIconBlock
          heading="Meet our team"
          content="Shoftime Tech is located in"
          isAddressVisible={true}
          addressContent="Yogyakarta, Indonesia"
        >
          <Icon name="mapPin" />
        </ContactIconBlock>

        <ContactIconBlock
          heading="Contact us by email"
          content="Prefer the written word? Drop us an email at"
          isLinkVisible={true}
          linkTitle="shoftimetech@gmail.com"
          linkURL="mailto:shoftimetech@gmail.com"
        >
          <Icon name="envelopeOpen" />
        </ContactIconBlock>
      </div>
    </div>
  </div>
</section>

<style>
  /* Remove the previous CSS that was causing validation messages to show */
  .error-message {
    font-size: 0.875rem;
    color: #ef4444;
    margin-top: 0.25rem;
    display: block;
  }

  .border-red-500 {
    border-color: #ef4444 !important;
  }

  /* Focus styles */
  .form-group input:focus,
  .form-group textarea:focus {
    border-color: #d1d5db;
    outline: none;
    box-shadow: 0 0 0 3px rgba(156, 163, 175, 0.1);
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const form = document.getElementById(
      "contact-form"
    ) as HTMLFormElement | null;
    const statusText = document.getElementById(
      "form-status"
    ) as HTMLElement | null;

    if (!form || !statusText) return;

    const formSubTitle = "We'll try the best to get back to you!";

    form.addEventListener("submit", async function (e) {
      e.preventDefault();

      // Clear previous error messages
      clearErrorMessages();

      // Check if form is valid
      const isValid = validateForm();

      if (!isValid) {
        // Only show validation messages when user clicks submit and form is invalid
        showValidationErrors();
        statusText.innerHTML = "Please fill in all required fields.";
        statusText.classList.add("text-red-500");
        return;
      }
      // Show loading state
      setLoadingState(true);

      // Clear any error styling from status text
      statusText.classList.remove("text-red-500");

      const formData = new FormData(form);
      const data = Object.fromEntries(formData.entries());
      const json = JSON.stringify(data);

      statusText.innerHTML = "Sending...";

      try {
        const res = await fetch("https://api.web3forms.com/submit", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          body: json,
        });

        const result = await res.json();

        if (res.status === 200) {
          statusText.innerHTML = result.message;
          statusText.classList.remove("text-red-500");
          statusText.classList.add("text-green-500");
          form.reset();
          clearErrorMessages();
        } else {
          statusText.innerHTML = result.message + " | Submission failed.";
          statusText.classList.add("text-red-500");
        }
      } catch (error) {
        statusText.innerHTML = "Something went wrong!";
        statusText.classList.add("text-red-500");
      } finally {
        // Hide loading state
        setLoadingState(false);
      }

      setTimeout(() => {
        statusText.innerHTML = formSubTitle;
        statusText.classList.remove("text-green-500", "text-red-500");
      }, 5000);
    });

    function setLoadingState(isLoading: boolean) {
      const loadingSpinner = document.getElementById("loading-spinner");
      const buttonText = document.getElementById("button-text");
      const submitBtn = document.getElementById("submit-btn") as HTMLButtonElement;
      const originalButtonText = "Send Message";

      if (!loadingSpinner || !buttonText || !submitBtn) return;

      if (isLoading) {
        // Show spinner, hide text, disable button
        loadingSpinner.classList.remove("hidden");
        buttonText.textContent = "Sending...";
        submitBtn.disabled = true;
        submitBtn.classList.add("opacity-75");
      } else {
        // Hide spinner, show text, enable button
        loadingSpinner.classList.add("hidden");
        buttonText.textContent = originalButtonText;
        submitBtn.disabled = false;
        submitBtn.classList.remove("opacity-75");
      }
    }

    function validateForm() {
      const requiredFields = form
        ? form.querySelectorAll("input[required], textarea[required]")
        : [];
      let isValid = true;

      requiredFields.forEach((field) => {
        const value = (
          field as HTMLInputElement | HTMLTextAreaElement
        ).value.trim();

        // Check if field is empty
        if (!value) {
          isValid = false;
          return;
        }

        // Additional validation for email
        if (
          (field as HTMLInputElement).type === "email" &&
          !isValidEmail(value)
        ) {
          isValid = false;
          return;
        }

        // Additional validation for phone
        if (
          (field as HTMLInputElement).type === "tel" &&
          !isValidPhone(value)
        ) {
          isValid = false;
          return;
        }
      });

      return isValid;
    }

    function isValidEmail(email: string) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }

    function isValidPhone(phone: string) {
      // Basic phone validation - at least 10 digits
      const phoneRegex = /^\+?[\d\s\-\(\)]{10,}$/;
      return phoneRegex.test(phone);
    }

    function showValidationErrors() {
      const requiredFields = form
        ? form.querySelectorAll("input[required], textarea[required]")
        : [];

      requiredFields.forEach((field) => {
        const value = (
          field as HTMLInputElement | HTMLTextAreaElement
        ).value.trim();
        let isFieldValid = true;
        let errorMessage = "";

        if (!value) {
          isFieldValid = false;
          errorMessage = getEmptyFieldMessage(
            field as HTMLInputElement | HTMLTextAreaElement
          );
        } else if (
          (field as HTMLInputElement).type === "email" &&
          !isValidEmail(value)
        ) {
          isFieldValid = false;
          errorMessage = "Please provide a valid email address.";
        } else if (
          (field as HTMLInputElement).type === "tel" &&
          !isValidPhone(value)
        ) {
          isFieldValid = false;
          errorMessage = "Please provide a valid phone number.";
        }

        if (!isFieldValid) {
          field.classList.add("border-red-500");
          showFieldError(
            field as HTMLInputElement | HTMLTextAreaElement,
            errorMessage
          );
        }
      });
    }

    function getEmptyFieldMessage(
      field: HTMLInputElement | HTMLTextAreaElement
    ) {
      const fieldName = field.getAttribute("name") || "";
      const messages = {
        first_name: "Please provide your first name.",
        last_name: "Please provide your last name.",
        email: "Please provide your email.",
        phone: "Please provide your phone number.",
        message: "Please provide your details.",
      };

      return (
        messages[fieldName as keyof typeof messages] ||
        "This field is required."
      );
    }

    function showFieldError(
      field: HTMLInputElement | HTMLTextAreaElement,
      message: string
    ) {
      const fieldContainer = field.closest(".form-group");
      if (!fieldContainer) return;

      let errorMessage = fieldContainer.querySelector(".error-message");

      if (!errorMessage) {
        errorMessage = document.createElement("div");
        errorMessage.className = "error-message text-red-500 text-sm mt-1";
        fieldContainer.appendChild(errorMessage);
      }

      errorMessage.textContent = message;
    }

    function clearErrorMessages() {
      if (!form) return;
      const errorMessages = form.querySelectorAll(".error-message");
      errorMessages.forEach((msg) => msg.remove());

      const fields = form.querySelectorAll("input, textarea");
      fields.forEach((field) => {
        field.classList.remove("border-red-500");
      });
    }

    // Clear individual field errors when user starts typing
    const fields = form.querySelectorAll("input, textarea");
    fields.forEach((field) => {
      field.addEventListener("input", function (event) {
        const currentField = event.target;
        const value = (
          currentField as HTMLInputElement | HTMLTextAreaElement
        ).value.trim();
        let isFieldValid = true;

        // Check if field has value
        if (!value) {
          isFieldValid = false;
        } else {
          // Additional validation for specific field types
          if (
            currentField instanceof HTMLInputElement &&
            currentField.type === "email" &&
            !isValidEmail(value)
          ) {
            isFieldValid = false;
          } else if (
            currentField instanceof HTMLInputElement &&
            currentField.type === "tel" &&
            !isValidPhone(value)
          ) {
            isFieldValid = false;
          }
        }

        if (isFieldValid) {
          if (currentField) {
            (
              currentField as HTMLInputElement | HTMLTextAreaElement
            ).classList.remove("border-red-500");
          }
          const fieldContainer =
            currentField instanceof HTMLElement
              ? currentField.closest(".form-group")
              : null;
          if (fieldContainer) {
            const errorMessage = fieldContainer.querySelector(".error-message");
            if (errorMessage) {
              errorMessage.remove();
            }
          }
        }
      });
    });
  });
</script>
